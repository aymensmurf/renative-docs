"use strict";(self.webpackChunkrenative_website=self.webpackChunkrenative_website||[]).push([[9205],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(t),m=i,v=d["".concat(p,".").concat(m)]||d[m]||c[m]||l;return t?r.createElement(v,a(a({ref:n},u),{},{components:t})):r.createElement(v,a({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,a=new Array(l);a[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var s=2;s<l;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4963:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=t(7462),i=t(3366),l=(t(7294),t(3905)),a=["components"],o={id:"guide-overview",title:"Overview",sidebar_label:"Overview",original_id:"guide-overview"},p=void 0,s={unversionedId:"advanced/guide-overview",id:"advanced/guide-overview",isDocsHomePage:!1,title:"Overview",description:"Configuration Merges",source:"@site/docs/advanced/overview-advanced-configuration.md",sourceDirName:"advanced",slug:"/advanced/guide-overview",permalink:"/docs/advanced/guide-overview",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/advanced/overview-advanced-configuration.md",tags:[],version:"current",frontMatter:{id:"guide-overview",title:"Overview",sidebar_label:"Overview",original_id:"guide-overview"}},u=[{value:"Configuration Merges",id:"configuration-merges",children:[],level:2},{value:"Dynamic Injectors",id:"dynamic-injectors",children:[{value:"configProps",id:"configprops",children:[],level:3},{value:"runtimeProps",id:"runtimeprops",children:[],level:3},{value:"props",id:"props",children:[],level:3},{value:"resolvePackage",id:"resolvepackage",children:[],level:3},{value:"files.*",id:"files",children:[],level:3},{value:"env",id:"env",children:[],level:3}],level:2},{value:"Config Values Overrides",id:"config-values-overrides",children:[],level:2},{value:"Build Flavours",id:"build-flavours",children:[],level:2},{value:"Runtime Props",id:"runtime-props",children:[],level:2}],c={toc:u};function d(e){var n=e.components,t=(0,i.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"configuration-merges"},"Configuration Merges"),(0,l.kt)("p",null,"ReNative always merges all relevant renative configs into one single build config."),(0,l.kt)("p",null,"Following is the order of merges of various renative configs (if present) producing final ",(0,l.kt)("inlineCode",{parentName:"p"},"platformAssets/renative.json")," config file."),(0,l.kt)("p",null,"\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[RNV_PATH]/projectTemplates/renative.templates.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[RNV_PATH]/pluginTemplates/renative.plugins.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/renative.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/renative.private.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/renative.local.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/renative.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/renative.private.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/renative.local.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/appConfigs/[APP_ID]/renative.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/appConfigs/[APP_ID]/renative.private.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/appConfigs/[APP_ID]/renative.local.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/renative.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/renative.private.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/renative.local.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/appConfigs/[APP_ID]/renative.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/appConfigs/[APP_ID]/renative.private.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/appConfigs/[APP_ID]/renative.local.json"),(0,l.kt)("br",null)),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"dynamic-injectors"},"Dynamic Injectors"),(0,l.kt)("p",null,"You can inject varietry of different dynamic props via ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," configs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"{{INJECTOR}}\n")),(0,l.kt)("h3",{id:"configprops"},"configProps"),(0,l.kt)("p",null,"Any property in ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," can be injected into build file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "common": {\n     "id": "com.example.app"\n  }\n}\n')),(0,l.kt)("p",null,"Inject example of ",(0,l.kt)("inlineCode",{parentName:"p"},"myInject.txt"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Inject app ID here: {{configProps.id}}\n")),(0,l.kt)("h3",{id:"runtimeprops"},"runtimeProps"),(0,l.kt)("p",null,"runtimeProps are special properties generated during each rnv run."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "common": {\n     "timestamp": "{{runtimeProps.timestamp}}"\n  }\n}\n')),(0,l.kt)("p",null,"Currently supported runtime properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"scheme"),(0,l.kt)("li",{parentName:"ul"},"appConfing"),(0,l.kt)("li",{parentName:"ul"},"engine"),(0,l.kt)("li",{parentName:"ul"},"localhost"),(0,l.kt)("li",{parentName:"ul"},"timestamp"),(0,l.kt)("li",{parentName:"ul"},"appDir"),(0,l.kt)("li",{parentName:"ul"},"appId"),(0,l.kt)("li",{parentName:"ul"},"isWrapper"),(0,l.kt)("li",{parentName:"ul"},"missingEnginePlugins"),(0,l.kt)("li",{parentName:"ul"},"targetUDID"),(0,l.kt)("li",{parentName:"ul"},"target"),(0,l.kt)("li",{parentName:"ul"},"shouldOpenBrowser"),(0,l.kt)("li",{parentName:"ul"},"port")),(0,l.kt)("h3",{id:"props"},"props"),(0,l.kt)("p",null,"you can abstract complex ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," plugin configuration via props inject mechanism"),(0,l.kt)("p",null,"Example plugin definition:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"react-native-fbsdk": {\n    "props": {\n        "APP_ID": "",\n        "APP_NAME": ""\n    },\n    "ios": {\n        "podName": "react-native-fbsdk",\n        "appDelegateImports": [\n            "FBSDKCoreKit"\n        ],\n        "appDelegateMethods": {\n            "application": {\n                "didFinishLaunchingWithOptions": [\n                    "ApplicationDelegate.shared.application(application, didFinishLaunchingWithOptions: launchOptions)"\n                ],\n                "open": [\n                    "ApplicationDelegate.shared.application(app, open: url, options: options)"\n                ]\n            }\n        },\n        "plist": {\n            "FacebookAppID": "{{props.APP_ID}}",\n            "FacebookDisplayName": "{{props.APP_NAME}}",\n            "CFBundleURLTypes": [\n                {\n                    "CFBundleTypeRole": "Editor",\n                    "CFBundleURLSchemes": [\n                        "fb{{props.APP_ID}}"\n                    ]\n                }\n            ],\n            "LSApplicationQueriesSchemes": [\n                "fbapi",\n                "fb-messenger-share-api",\n                "fbauth2",\n                "fbshareextension"\n            ]\n        }\n    }\n}\n')),(0,l.kt)("p",null,"Example usage:"),(0,l.kt)("p",null,"Instead of overriding complex plugin definition you can simply override props"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "plugins": {\n     "react-native-fbsdk": {\n         "props": {\n             "APP_ID": "xxxxxxxxx",\n             "APP_NAME": "xxxxxxxxxxxx"\n         }\n      }\n   }\n}\n')),(0,l.kt)("h3",{id:"resolvepackage"},"resolvePackage"),(0,l.kt)("p",null,"resolvePackage allows you to dynamically resolve package location within ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  "common": {\n     "reactLocation": "{{resolvePackage(\'react\')}}"\n  }\n}\n')),(0,l.kt)("h3",{id:"files"},"files.*"),(0,l.kt)("p",null,"you can reference values from all standard file references within renative config."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  "runtime": {\n     "myId": "{{files.project.config.common.id}}"\n  }\n}\n')),(0,l.kt)("p",null,"Supported file references:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"files.project.package\nfiles.project.config\nfiles.project.configPrivate\nfiles.project.configLocal\nfiles.workspace.config\nfiles.workspace.configPrivate\nfiles.workspace.configLocal\nfiles.workspace.project.config\nfiles.workspace.project.configPrivate\nfiles.workspace.project.configLocal\nfiles.appConfig.config\nfiles.appConfig.configPrivate\nfiles.appConfig.configLocal\n")),(0,l.kt)("h3",{id:"env"},"env"),(0,l.kt)("p",null,"You can inject env variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  "runtime": {\n     "myEnvVariable": "{{env.MY_ENV_VARIABLE}}"\n  }\n}\n')),(0,l.kt)("h2",{id:"config-values-overrides"},"Config Values Overrides"),(0,l.kt)("p",null,"There are 3 levels of override entry objects for your props to fine-tune your app config:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},".common")," //Applies for all platforms + all schemes"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},".platforms.YOUR_PLATFORM")," //Applies specific platforms + all schemes"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},".platforms.YOUR_PLATFORM.buildSchemes.YOUR_SCHEME")," //Applies for specific platform + specific scheme")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "common": {\n        "MY_PROP": "Value1"\n    },\n    "platforms": {\n        "ios": {\n            "MY_PROP": "Value2 overrides Value1",\n            "buildSchemes": {\n                "debug": {\n                    "MY_PROP": "Value3 overrides Value 2"\n                }\n            }\n        }\n    }\n}\n')),(0,l.kt)("p",null,"Override Rules for json props:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Strings")," => Replaced"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Numbers")," => Replaced"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Arrays")," => Replaced"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Objects")," => Merged by top level (not deep merge)")),(0,l.kt)("p",null,"Example:\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pavjacko/renative/blob/develop/packages/renative-template-hello-world/appConfigs/helloworld/renative.json#L4"},"https://github.com/pavjacko/renative/blob/develop/packages/renative-template-hello-world/appConfigs/helloworld/renative.json#L4")),(0,l.kt)("p",null,"Will be overridden by:\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pavjacko/renative/blob/develop/packages/renative-template-hello-world/appConfigs/helloworld/renative.json#L59"},"https://github.com/pavjacko/renative/blob/develop/packages/renative-template-hello-world/appConfigs/helloworld/renative.json#L59")),(0,l.kt)("p",null,"Output config will be decorated with few extra props to help with debugging:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  "_timestamp": "",\n  "_mergeSources": []\n}\n')),(0,l.kt)("h2",{id:"build-flavours"},"Build Flavours"),(0,l.kt)("p",null,"You can configure different app ID, Title etc. with buildScheme field in you appConfig file."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"buildSchemes": {\n  "debug": {\n    "id": "renative.helloworld.debug",\n    "runScheme": "Debug",\n    "bundleAssets": false,\n    "bundleIsDev": true\n  },\n  "release": {\n    "id": "renative.helloworld.release",\n    "runScheme": "Release",\n    "bundleAssets": true,\n    "bundleIsDev": false\n  }\n}\n')),(0,l.kt)("p",null,"this will allow you to build 2 separate iOS apps with slightly different configurations:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"$ rnv run -p ios -s debug")," (",(0,l.kt)("inlineCode",{parentName:"p"},"-s debug")," is DEFAULT option so you don't have to add it every time)"),(0,l.kt)("p",null,"and"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"$ rnv run -p ios -s release")),(0,l.kt)("h2",{id:"runtime-props"},"Runtime Props"),(0,l.kt)("p",null,"When you define object with key ",(0,l.kt)("inlineCode",{parentName:"p"},"runtime"),", its properties will be merged into final ",(0,l.kt)("inlineCode",{parentName:"p"},"./platformAssets/renative.runtime.json")," file"),(0,l.kt)("p",null,"you can import above file into your code and get different values depending on your build"))}d.isMDXComponent=!0}}]);